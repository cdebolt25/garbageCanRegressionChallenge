---
title: "Garbage Can Regression Challenge"
format:
  html: default
execute:
  echo: false
  eval: false
---

# Garbage Can Regression Challenge

```python
#| echo: true
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
import statsmodels.api as sm

# Data with known true relationships: Anxiety = Stress + 0.1 Ã— Time
data = {
    'Stress': [0,0,0,1,1,1,2,2,2,8,8,8,12,12,12],
    'StressSurvey': [0,0,0,3,3,3,6,6,6,9,9,9,12,12,12],
    'Time': [0,1,1,1,1,1,2,2,2,2,2,2.1,2.2,2.2,2.2],
    'Anxiety': [0,0.1,0.1,1.1,1.1,1.1,2.2,2.2,2.2,8.2,8.2,8.21,12.22,12.22,12.22]
}

observDF = pd.DataFrame(data)
print(observDF)
```

## Your Analysis

Follow the challenge instructions from your course to complete your analysis.

### Bivariate regression: Anxiety ~ StressSurvey

```python
#| echo: true
import statsmodels.api as sm

X = sm.add_constant(observDF[["StressSurvey"]])
y = observDF["Anxiety"]

ols_model = sm.OLS(y, X).fit()

print("Estimated coefficients (Anxiety ~ StressSurvey):")
print({"Intercept": float(ols_model.params["const"]),
       "StressSurvey": float(ols_model.params["StressSurvey"])})
print(f"R^2: {ols_model.rsquared:.4f}")

# For reference: quick check of the true model using Stress and Time
X_true = sm.add_constant(observDF[["Stress", "Time"]])
ols_true = sm.OLS(y, X_true).fit()
print("\nReference fit (Anxiety ~ Stress + Time):")
print({"Intercept": float(ols_true.params["const"]),
       "Stress": float(ols_true.params["Stress"]),
       "Time": float(ols_true.params["Time"])})
print(f"R^2: {ols_true.rsquared:.4f}")
```